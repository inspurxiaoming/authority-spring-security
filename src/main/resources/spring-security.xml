<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:ldap="http://www.springframework.org/schema/ldap"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:oauth2="http://www.mulesoft.org/schema/mule/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
    http://www.springframework.org/schema/ldap http://www.springframework.org/schema/ldap/spring-ldap.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security.xsd
       http://www.mulesoft.org/schema/mule/oauth2 http://www.mulesoft.org/schema/mule/oauth2/current/mule-oauth2.xsd">

	<!-- Applies to root appContext beans only, for MVC Controllers is this 
		declaration repeated in MVC config. Actually, we currently don't need this 
		as we have on annotation outside of MVC. There is more here that can go wrong. 
		If you use interface-based proxy (our demo uses CGLib), you may need to add 
		proxy-target-class="true" as well. Book "Spring Security 3.1", Chapter 10, 
		Fine-grained Access Control, from header "Method security on Spring MVC controllers" 
		on discusses these topics. -->
		
	<context:property-placeholder location="classpath:/ldap.properties"
		system-properties-mode="OVERRIDE" />
	<context:annotation-config />

	<!--
	Important for @Secured annotations to work.
	Here we enable all three of them - @Secured, @PreAuthorize and @RolesAllowed. You may choose what you use.
	Check MainRestController for examples.
	 -->
	<global-method-security secured-annotations="enabled" pre-post-annotations="enabled" jsr250-annotations="enabled"/>
	
	<http realm="Protected API" use-expressions="true"
		create-session="stateless" entry-point-ref="unauthorizedEntryPoint"
		authentication-manager-ref="ldapAuthenticationManager">

		<!-- Added after moving to Spring Boot 1.3 + Spring Security 4.x, otherwise 
			we could not login with basic auth because of: Expected CSRF token not found 
			TODO: Please, mind, that I did not migrate this XML to Spring Security 4.x 
			except for this element -->
		<!-- <csrf disabled="true"/> -->

		<!-- This is not easily possible, because it causes: DEBUG o.s.s.w.a.ExceptionTranslationFilter 
			- Authentication exception occurred; redirecting to authentication entry 
			point org.springframework.security.authentication.AuthenticationCredentialsNotFoundException: 
			An Authentication object was not found in the SecurityContext -->
		<!--<anonymous enabled="false"/> -->
<!-- 		<custom-filter ref="restAuthenticationFilter"
			position="FORM_LOGIN_FILTER" /> -->

		<intercept-url pattern="/*" access="permitAll" />
		<intercept-url pattern="/secure/**" access="isFullyAuthenticated()" />
	</http>

<!-- 	<beans:bean id="unauthorizedEntryPoint"
		class="com.github.virgo47.respsec.main.restsec.UnauthorizedEntryPoint" />

	<beans:bean id="userDetailService"
		class="com.github.virgo47.respsec.main.secimpl.MyUserDetailsService" />

	<authentication-manager id="restAuthenticationManager">
		<authentication-provider
			user-service-ref="userDetailService">
			Default password encoder is PlaintextPasswordEncoder, which fits 
				with our hardcoded users. Obviously not a good choice otherwise.
		</authentication-provider>
	</authentication-manager>

	<beans:bean id="tokenManager"
		class="com.github.virgo47.respsec.main.secimpl.TokenManagerSingle" />

	<beans:bean id="authenticationService"
		class="com.github.virgo47.respsec.main.secimpl.AuthenticationServiceDefault"
		oauth2:authenticationManager-ref="restAuthenticationManager"
		oauth2:tokenManager-ref="tokenManager" />
		
	<beans:bean id="restAuthenticationFilter"
		class="com.github.virgo47.respsec.main.restsec.TokenAuthenticationFilter" 
		oauth2:authenticationService-ref="authenticationService" oauth2:logoutLink="/logout"  /> -->
	
	<authentication-manager alias="ldapAuthenticationManager">
		<!-- do service account ldap auth -->
		<authentication-provider ref="kylinServiceAccountAuthProvider"></authentication-provider>
	</authentication-manager>

	<authentication-manager id="apiAccessAuthenticationManager">
		<authentication-provider ref="kylinServiceAccountAuthProvider" />
	</authentication-manager>


	<beans:bean id="ldapSource"
		class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
		<beans:constructor-arg name="providerUrl" value="${sample.ldap.url}" />
		<beans:property name="userDn" value="${sample.ldap.userDn}" />
		<beans:property name="password" value="${sample.ldap.password}" />
	</beans:bean>

</beans:beans>