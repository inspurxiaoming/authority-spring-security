<?xml version="1.0" encoding="UTF-8"?>
<bean:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:bean="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:ldap="http://www.springframework.org/schema/ldap" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
    http://www.springframework.org/schema/ldap http://www.springframework.org/schema/ldap/spring-ldap.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- Applies to root appContext beans only, for MVC Controllers is this 
		declaration repeated in MVC config. Actually, we currently don't need this 
		as we have on annotation outside of MVC. There is more here that can go wrong. 
		If you use interface-based proxy (our demo uses CGLib), you may need to add 
		proxy-target-class="true" as well. Book "Spring Security 3.1", Chapter 10, 
		Fine-grained Access Control, from header "Method security on Spring MVC controllers" 
		on discusses these topics. -->

	<context:property-placeholder location="classpath:/ldap.properties"
		system-properties-mode="OVERRIDE" />
	<context:annotation-config />

	<!-- Important for @Secured annotations to work. Here we enable all three 
		of them - @Secured, @PreAuthorize and @RolesAllowed. You may choose what 
		you use. Check MainRestController for examples. -->
	<global-method-security secured-annotations="enabled" pre-post-annotations="enabled" jsr250-annotations="enabled" />

	<!-- http开启网页安全，应用程序对URL进行安全性检测， -->
	<http security="none" pattern="/login.jsp" />
	<http auto-config="true">
<!-- 		<form-login login-page="/login.jsp" login-processing-url="/login.jsp"
			username-parameter="username" password-parameter="password" /> -->
		<intercept-url pattern="/check" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
		<intercept-url pattern="/admin" access="ROLE_AUTHORITY_SYSTEM_ADMIN"/>
 <!--		<intercept-url pattern="/login" access="IS_AUTHENTICATED_ANONYMOUSLY" /> 
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />-->
	</http>

	<authentication-manager alias="ldapAuthenticationManager">
		<!-- do service account ldap auth -->
		<authentication-provider ref="userAuthProvider"></authentication-provider>
	</authentication-manager>

	<authentication-manager id="apiAccessAuthenticationManager">
		<authentication-provider ref="userAuthProvider" />
	</authentication-manager>

	<!-- 配置LDAP Server相关信息， -->
	<bean:bean id="ldapSource"
		class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
		<bean:constructor-arg name="providerUrl" value="${sample.ldap.url}" />
	</bean:bean>
	
	<!-- 配置搜索User的过滤方式，cn=<user-login-name> -->
	<bean:bean id="userSearch"
		class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
		<bean:constructor-arg index="0"
			value="${sample.ldap.base}" />
		<bean:constructor-arg index="1"
			value="${ldap.user.searchPattern}" />
		<bean:constructor-arg index="2" ref="ldapSource" />
	</bean:bean>

	<!-- 从类型是 groupOfNames or groupOfUniqueNames的ldap实体中查找 member,配置groupSearcBase,默认adminRole defaultRole
		自定义的类，还可以增加其他类型的Group
	-->
	<bean:bean id="populator"
		class="cn.jw.authority.rest.security.AuthoritiesPopulator">
		<bean:constructor-arg index="0" ref="ldapSource" />
		<bean:constructor-arg index="1"
			value="${ldap.user.groupSearchBase}" />
		<bean:constructor-arg index="2"
			value="${ldap.acl.adminRole}" />
		<bean:constructor-arg index="3"
			value="${ldap.acl.defaultRole}" />
	</bean:bean>

	<!-- 基于 LdapAuthenticationProvider的自定义用户认证类-->
	<bean:bean id="userAuthProvider"
		class="cn.jw.authority.rest.security.MyAuthenticationProvider">
		<bean:constructor-arg>
			<bean:bean id="ldapUserAuthenticationProvider"
				class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
				<bean:constructor-arg>
					<bean:bean
						class="org.springframework.security.ldap.authentication.BindAuthenticator">
						<bean:constructor-arg ref="ldapSource" />
						<bean:property name="userSearch" ref="userSearch">
						</bean:property>
					</bean:bean>
				</bean:constructor-arg>
				<bean:constructor-arg ref="populator">
				</bean:constructor-arg>
			</bean:bean>
		</bean:constructor-arg>
	</bean:bean>

	<bean:bean id="ldapUserService"
		class="org.springframework.security.ldap.userdetails.LdapUserDetailsService">
		<bean:constructor-arg ref="userSearch">
		</bean:constructor-arg>
		<bean:constructor-arg ref="populator">
		</bean:constructor-arg>
	</bean:bean>

</bean:beans>